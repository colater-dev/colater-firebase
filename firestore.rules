rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data. Only the authenticated user can read their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Authenticated user with matching userId.
     * @deny (get, create, update, delete): Any other user or unauthenticated user.
     * @principle Enforces user-ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) ;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      // Helper function to check for existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Secures brands created by users. Only the owner can read, create, update, or delete.
     * @path /users/{userId}/brands/{brandId}
     * @allow (create): Authenticated user creates a brand under their userId.
     * @allow (get, update, delete): Only the owner of the brand can read, update, or delete it.
     * @deny (create, get, update, delete): Any other user.
     * @principle Enforces document ownership for writes and prevents unauthorized access.
     */
    match /users/{userId}/brands/{brandId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      // Helper function to check for existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Secures input versions for brands. Only the brand owner can manage input versions.
     * @path /users/{userId}/brands/{brandId}/inputVersions/{versionId}
     * @allow (create): Authenticated user creates an input version under their brand.
     * @allow (get, update, delete): Only the owner of the parent brand can read, update, or delete input versions.
     * @deny (create, get, update, delete): Any other user.
     * @principle Inherits ownership from parent and prevents unauthorized access.
     */
    match /users/{userId}/brands/{brandId}/inputVersions/{versionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Ensure the userId matches the parent brand's userId
      function isBrandOwner(userId, brandId) {
        return get(/databases/$(database)/documents/users/$(userId)/brands/$(brandId)).data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      // Helper function to check for existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

    /**
     * @description Secures AI-generated taglines for brands. Only the brand owner can access taglines.
     * @path /users/{userId}/brands/{brandId}/taglineGenerations/{generationId}
     * @allow (create): Authenticated user creates a tagline generation under their brand.
     * @allow (get, update, delete): Only the owner of the parent brand can read, update, or delete taglines.
     * @deny (create, get, update, delete): Any other user.
     * @principle Inherits ownership from parent and prevents unauthorized access.
     */
    match /users/{userId}/brands/{brandId}/taglineGenerations/{generationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

            // Ensure the userId matches the parent brand's userId
      function isBrandOwner(userId, brandId) {
        return get(/databases/$(database)/documents/users/$(userId)/brands/$(brandId)).data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      // Helper function to check for existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }

        /**
     * @description Secures AI-generated logos for brands. Only the brand owner can access logos.
     * @path /users/{userId}/brands/{brandId}/logoGenerations/{generationId}
     * @allow (create): Authenticated user creates a logo generation under their brand.
     * @allow (get, update, delete): Only the owner of the parent brand can read, update, or delete logos.
     * @deny (create, get, update, delete): Any other user.
     * @principle Inherits ownership from parent and prevents unauthorized access.
     */
    match /users/{userId}/brands/{brandId}/logoGenerations/{generationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

            // Ensure the userId matches the parent brand's userId
      function isBrandOwner(userId, brandId) {
        return get(/databases/$(database)/documents/users/$(userId)/brands/$(brandId)).data.userId == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);

      // Helper function to check for existing owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
    }
  }
}